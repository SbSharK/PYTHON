EXCEPTION HANDLING

TRY and EXCEPT blocks in PYTHON

Whenever any error is raised in try block, it will look for that specific error block in except blocks

NOTE : TO know which function throws which exception check help for that class. Every method will have a comment with the exception name
EX:

import sys

def divideByNumber(numerator, denominator):
    return numerator/denominator

try: #statements under this block are checked for errors
    numerator=int(input("Enter a numerator: "))
    denominator=int(input("Enter a denominator: ")) #if invalid input is passed to int function it will throw ValueError automatically and this error is handled in the except block
    if denominator == 0: #if this condition becomes true
        raise ZeroDivisionError("Can't divide by zero") #throw an exception with raise keyword
except ValueError as v: #error specification
    print("ValueError: ", v)
    sys.exit(1)
except ZeroDivisionError as e: #error specification
    print("Zero division error: ", e)
    sys.exit(1)
else: #This block is optional and is called if no error is raised in try block/no exception is occured
    print("Numerator: {}, Denominator: {}".format(numerator, denominator))
#even if sys.exit() is called finally block is first executed
#This block is optional and is called always no matter what, whether the exception is raised or not, finally will be executed
finally:
    print("FINALY BLOCK")
res = divideByNumber(numerator, denominator)
print("Division of {} and {} is {}.".format(numerator, denominator, res))


EXAMPLE 2

import sys

def divideByNumber(numerator, denominator):
    return numerator/denominator
flag = True
while(flag==True):
    flag = False
    try:
        numerator=int(input("Enter a numerator: "))
        denominator=int(input("Enter a denominator: "))
        res = divideByNumber(numerator, denominator)
        print("Division of {} and {} is {}.".format(numerator, denominator, res))
    except ValueError as v:
        print("Enter integer: ", v)
    except ZeroDivisionError as e:
        print("Zero division error ", e)
    #default 'except' must be last
    #execept block without any name is generic exception block which means Whenever any other error than specified error is occured then this block is executed
    except:
        print("No exception specified")
    else:
        flag = True #if no exception is occured then flag is set to True
        print("No exception while executing try block")
        print("Numerator: {}, Denominator: {}".format(numerator, denominator))
    finally:
        print("Finally block will be executed always")
        if(flag == False):
            sys.exit(1)

WRITING OWN EXCEPTION CLASSES:

EX

#!/usr/local/bin/python3.7
import sys

class SpeedLimitError(Exception): #INHERITANCE FOR OUR USER DEFINED CLASS FROM DEFAULT EXCEPTION CLASS IS NECESSARY TO WRITE USER DEFINED EXCEPTION CLASS
    def __init__(self, speed):
        self.speed = speed
    def __str__(self): #TO PRINT OBJECT
        return "Vehicle Speed is " + str(self.speed)

class SpeedBelowLimit(SpeedLimitError):
    def __init__(self, speed):
        SpeedLimitError.__init__(self, speed)

class SpeedAboveLimit(SpeedLimitError):
    def __init__(self, speed):
        SpeedLimitError.__init__(self, speed)

if __name__=="__main__":
    while True:
        try:
            speed = float(input("Enter Speed: "))
            if speed < 20:
                x = SpeedBelowLimit(speed)
                raise x #throwing an object means throwing exception for that class, in this case SpeedBelowLimit is inherited from SpeedLimitError which is in turn inherited from Exception
                #raise SpeedBelowLimit(speed)
            elif speed > 80:
                raise SpeedAboveLimit(speed)
            else:
                print("Speed In Limit")
                break
        except ValueError as t:
            print("TypeError:", t)
        except SpeedBelowLimit as e:
            print("Speed Below Limit:", e)
        except SpeedAboveLimit as e:
            print("Speed Above Limit:", e)



GENERATOR :
return keyword - it returns a value from a function and ends the function execution

yield keyword - it is similar to return, it is a special keyword, which will return to the next yeild statement on every next execution
EX :

def simpleGenerator(): # it is a generator class not a function
  print("Entry")
  yield 1 #as soon as a yield statement is written in a function it becomes a generator class
  print(1)
  yield 2
  print(2)
  yield 3
  print(3)
  yield 4
  print(4)
  yield 5,6

x = simpleGenerator()
print("Type of x: "type(x))
for val in x:
  print(val)

OUTPUT:
Type of x:  <class 'generator'>
Entry
1
1
2
2
3
3
4
4
(5, 6)
